# Base class
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
    
    def display_info(self):
        print(f"Name: {self.name}, Age: {self.age}")

# Single Inheritance
class Student(Person):
    def __init__(self, name, age, student_id):
        super().__init__(name, age)
        self.student_id = student_id
    
    def study(self, subject):
        print(f"{self.name} studies {subject}")

# Multilevel Inheritance
class HighSchoolStudent(Student):
    def __init__(self, name, age, student_id, grade):
        super().__init__(name, age, student_id)
        self.grade = grade
    
    def attend_class(self):
        print(f"{self.name} attends classes in grade {self.grade}")

# Hierarchical Inheritance
class Teacher(Person):
    def __init__(self, name, age, employee_id, subject):
        super().__init__(name, age)
        self.employee_id = employee_id
        self.subject = subject
    
    def teach(self):
        print(f"{self.name} teaches {self.subject}")

class SubstituteTeacher(Teacher):
    def __init__(self, name, age, employee_id, subject):
        super().__init__(name, age, employee_id, subject)
    
    def cover_class(self):
        print(f"{self.name} covers class for {self.subject}")

# Multiple Inheritance
class StaffMember(Person):
    def __init__(self, name, age, employee_id, department):
        super().__init__(name, age)
        self.employee_id = employee_id
        self.department = department
    
    def work(self):
        print(f"{self.name} works in {self.department}")

class Janitor(StaffMember, Person):
    def __init__(self, name, age, employee_id, department):
        StaffMember.__init__(self, name, age, employee_id, department)

    def clean(self):
        print(f"{self.name} cleans {self.department} area")

# Hybrid (Multipath) Inheritance
class Principal(Teacher, StaffMember):
    def __init__(self, name, age, employee_id, subject, department):
        Teacher.__init__(self, name, age, employee_id, subject)
        StaffMember.__init__(self, name, age, employee_id, department)
    
    def manage(self):
        print(f"{self.name} manages {self.department} and oversees {self.subject} teaching")

# Usage
# Creating instances to demonstrate each type of inheritance

# Single Inheritance example
student = Student("Alice", 16, "S001")
student.display_info()  # Output: Name: Alice, Age: 16
student.study("Math")   # Output: Alice studies Math

# Multilevel Inheritance example
high_school_student = HighSchoolStudent("Bob", 17, "S002", 11)
high_school_student.display_info()  # Output: Name: Bob, Age: 17
high_school_student.attend_class()  # Output: Bob attends classes in grade 11

# Hierarchical Inheritance example
teacher = Teacher("Ms. Smith", 35, "T001", "History")
teacher.display_info()  # Output: Name: Ms. Smith, Age: 35
teacher.teach()          # Output: Ms. Smith teaches History

substitute_teacher = SubstituteTeacher("Mr. Johnson", 30, "T002", "Math")
substitute_teacher.display_info()  # Output: Name: Mr. Johnson, Age: 30
substitute_teacher.cover_class()   # Output: Mr. Johnson covers class for Math

# Multiple Inheritance example
janitor = Janitor("Mr. Brown", 50, "J001", "Maintenance")
janitor.display_info()   # Output: Name: Mr. Brown, Age: 50
janitor.work()           # Output: Mr. Brown works in Maintenance
janitor.clean()          # Output: Mr. Brown cleans Maintenance area

# Hybrid (Multipath) Inheritance example
principal = Principal("Dr. Lee", 45, "P001", "Science", "Administration")
principal.display_info()  # Output: Name: Dr. Lee, Age: 45
principal.manage()        # Output: Dr. Lee manages Administration and oversees Science teaching
